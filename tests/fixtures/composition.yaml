apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: simpleconfigmaps.test.crossplane.io
spec:
  compositeTypeRef:
    apiVersion: test.crossplane.io/v1beta1 
    kind: SimpleConfigMap
  mode: Pipeline
  pipeline:
    - step: transform-to-uppercase
      functionRef:
        name: function-skyhook
      input:
        apiVersion: skyhook.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          source:
            inline: |
              /**
               * Helper function to safely access nested properties
               */
              function getNestedProperty(obj, path) {
                const parts = path.split('.');
                let current = obj;
                
                for (const part of parts) {
                  if (current === null || current === undefined) {
                    return undefined;
                  }
                  current = current[part];
                }
                
                return current;
              }
              
              /**
               * Main function to transform SimpleConfigMap data to uppercase
               * @param {Object} input - The input object from Crossplane
               * @returns {Object} The desired state with transformed ConfigMap
               */
              export default function transformToUppercase(input) {
                // Extract data from the input structure
                let data;
                
                // Try different paths to find the data
                const paths = [
                  'observed.composite.resource.spec.data',
                  'composite.resource.spec.data',
                  'spec.data',
                  'resource.spec.data'
                ];
                
                // Find the first path that contains data
                for (const path of paths) {
                  const foundData = getNestedProperty(input, path);
                  if (foundData) {
                    data = foundData;
                    break;
                  }
                }
                
                // Use sample data as fallback
                if (!data) {
                  data = {
                    name: "test",
                    email: "test@example.com",
                    role: "tester"
                  };
                }
                
                // Create a new object with uppercase values
                const uppercaseData = {};
                for (const key in data) {
                  uppercaseData[key.toUpperCase()] = data[key].toUpperCase();
                }
                
                // Create the ConfigMap with uppercase values
                const configMap = {
                  apiVersion: "v1",
                  kind: "ConfigMap",
                  metadata: {
                    name: "generated-configmap",
                    namespace: "test-skyhook"
                  },
                  data: uppercaseData
                };
                
                // Create the desired state
                const desired = {
                  resources: {
                    configmap: {
                      resource: configMap
                    }
                  }
                };
                
                return desired;
              }
